apiVersion: v1
kind: Namespace
metadata:
  name: n8n-storybook
  labels:
    name: n8n-storybook

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: n8n-storybook-config
  namespace: n8n-storybook
data:
  supabase-url: "https://your-project.supabase.co"
  nextauth-url: "https://n8n-storybook.yourdomain.com"
  redis-url: "redis://n8n-storybook-redis:6379"
  postgres-host: "n8n-storybook-postgres"
  postgres-port: "5432"
  postgres-database: "n8n_storybook"
  max-file-size: "50MB"
  generation-timeout: "300000"
  agent-timeout: "60000"
  max-concurrent-agents: "10"

---
apiVersion: v1
kind: Secret
metadata:
  name: n8n-storybook-secrets
  namespace: n8n-storybook
type: Opaque
stringData:
  # OpenAI API Key (replace with your actual key)
  openai-api-key: "sk-your-openai-api-key-here"
  
  # RunPod API Key (replace with your actual key)
  runpod-api-key: "your-runpod-api-key-here"
  
  # Supabase Anonymous Key (replace with your actual key)
  supabase-anon-key: "your-supabase-anon-key-here"
  
  # NextAuth Secret (generate a random secret)
  nextauth-secret: "your-nextauth-secret-here"
  
  # PostgreSQL credentials
  postgres-username: "postgres"
  postgres-password: "your-secure-password-here"
  
  # Redis password (if using auth)
  redis-password: "your-redis-password-here"
  
  # GitHub token for repository access (optional)
  github-token: "your-github-token-here"
  
  # Tambo MCP credentials
  tambo-mcp-key: "your-tambo-mcp-key-here"

---
# TLS Certificate (Let's Encrypt will populate this)
apiVersion: v1
kind: Secret
metadata:
  name: n8n-storybook-tls
  namespace: n8n-storybook
type: kubernetes.io/tls
data:
  # These will be automatically populated by cert-manager
  tls.crt: ""
  tls.key: ""

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: your-email@yourdomain.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx

---
# Service Account for the application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: n8n-storybook-sa
  namespace: n8n-storybook

---
# Role for the application
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: n8n-storybook-role
  namespace: n8n-storybook
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]

---
# Role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: n8n-storybook-rolebinding
  namespace: n8n-storybook
subjects:
- kind: ServiceAccount
  name: n8n-storybook-sa
  namespace: n8n-storybook
roleRef:
  kind: Role
  name: n8n-storybook-role
  apiGroup: rbac.authorization.k8s.io

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: n8n-storybook-netpol
  namespace: n8n-storybook
spec:
  podSelector:
    matchLabels:
      app: n8n-storybook-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: n8n-storybook-app
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
